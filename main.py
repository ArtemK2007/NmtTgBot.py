from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from dotenv import load_dotenv
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import BadRequest # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ BadRequest –¥–ª—è —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
import os

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è –∑ .env —Ñ–∞–π–ª—É
load_dotenv()
TOKEN = os.getenv("TOKEN")

#-----------------------------------------------------------------------------------------------------------------------
# –°–ø–∏—Å–æ–∫ —Ç–µ–º –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—Ü—ñ (29 —Ç–µ–º)
mathematics_topics = [
    "–ß–∏—Å–ª–∞ —Ç–∞ –¥—ñ—ó –∑ –Ω–∏–º–∏",
    "–†–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ —á–∏—Å–ª–∞",
    "–§—É–Ω–∫—Ü—ñ—ó",
    "–õ—ñ–Ω—ñ–π–Ω—ñ —Ä—ñ–≤–Ω—è–Ω–Ω—è —Ç–∞ –Ω–µ—Ä—ñ–≤–Ω–æ—Å—Ç—ñ",
    "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ñ —Ä—ñ–≤–Ω—è–Ω–Ω—è",
    "–°–∏—Å—Ç–µ–º–∏ —Ä—ñ–≤–Ω—è–Ω—å",
    "–ü–æ—Ö—ñ–¥–Ω–∞ —Ç–∞ —ó—ó –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è",
    "–ï–ª–µ–º–µ–Ω—Ç–∏ –∫–æ–º–±—ñ–Ω–∞—Ç–æ—Ä–∏–∫–∏",
    "–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä—ñ—è",
    "–ì–µ–æ–º–µ—Ç—Ä–∏—á–Ω—ñ —Ñ—ñ–≥—É—Ä–∏",
    "–í–µ–∫—Ç–æ—Ä–∏",
    "–ü–ª–∞–Ω—ñ–º–µ—Ç—Ä—ñ—è",
    "–°—Ç–µ—Ä–µ–æ–º–µ—Ç—Ä—ñ—è",
    "–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä—ñ—è",
    "–ü—Ä–æ–≥—Ä–µ—Å—ñ—ó",
    "–ú–Ω–æ–∂–∏–Ω–∏",
    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
    "–¢–µ–æ—Ä—ñ—è –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π",
    "–õ–æ–≥–∞—Ä–∏—Ñ–º–∏",
    "–ü–æ–∫–∞–∑–Ω–∏–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó",
    "–ì—Ä–∞—Ñ—ñ–∫–∏ —Ñ—É–Ω–∫—Ü—ñ–π",
    "–ü–æ—Ö—ñ–¥–Ω–∞ –≤ –¥–µ—Ç–∞–ª—è—Ö",
    "–Ü–Ω—Ç–µ–≥—Ä–∞–ª–∏ (–±–∞–∑–æ–≤–æ)",
    "–†—ñ–≤–Ω—è–Ω–Ω—è –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
    "–°–∏–º–µ—Ç—Ä—ñ—ó —Ç–∞ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è",
    "–†—ñ–≤–Ω—è–Ω–Ω—è –∫–æ–ª–∞, –µ–ª—ñ–ø—Å–∞",
    "–ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –∑ –º–æ–¥—É–ª—è–º–∏",
    "–ó–∞–¥–∞—á—ñ –Ω–∞ —Ä—É—Ö",
    "–ö–æ–º–±—ñ–Ω–∞—Ç–æ—Ä–∏–∫–∞ –≤ –∑–∞–¥–∞—á–∞—Ö",
]
#-----------------------------------------------------------------------------------------------------------------------
# –°–ø–∏—Å–æ–∫ —Ç–µ–º –∑ –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ (–¥–æ–¥–∞–Ω–æ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É)
ukrainian_topics = [
    "–§–æ–Ω–µ—Ç–∏–∫–∞. –û—Ä—Ñ–æ–µ–ø—ñ—è. –ì—Ä–∞—Ñ—ñ–∫–∞. –û—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—è",
    "–õ–µ–∫—Å–∏–∫–æ–ª–æ–≥—ñ—è. –§—Ä–∞–∑–µ–æ–ª–æ–≥—ñ—è",
    "–ë—É–¥–æ–≤–∞ —Å–ª–æ–≤–∞. –°–ª–æ–≤–æ—Ç–≤—ñ—Ä. –ú–æ—Ä—Ñ–æ–ª–æ–≥—ñ—è",
    "–°–∏–Ω—Ç–∞–∫—Å–∏—Å. –ü—É–Ω–∫—Ç—É–∞—Ü—ñ—è",
    "–°—Ç–∏–ª—ñ—Å—Ç–∏–∫–∞. –ö—É–ª—å—Ç—É—Ä–∞ –º–æ–≤–ª–µ–Ω–Ω—è",
    "–¢–µ–∫—Å—Ç–æ–ª–æ–≥—ñ—è",
    "–†–æ–∑–≤–∏—Ç–æ–∫ –º–æ–≤–ª–µ–Ω–Ω—è",
    "–ó–∞—Å–æ–±–∏ –≤–∏—Ä–∞–∑–Ω–æ—Å—Ç—ñ –º–æ–≤–∏"
]
#-----------------------------------------------------------------------------------------------------------------------
# –°–ø–∏—Å–æ–∫ —Ç–µ–º –∑ —ñ—Å—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ (37 —Ç–µ–º)
history_topics = [
    "–í—Å—Ç—É–ø –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏",
    "–°—Ç–∞—Ä–æ–¥–∞–≤–Ω—è —ñ—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏",
    "–ö–æ—Ä–æ–ª—ñ–≤—Å—Ç–≤–æ –†—É—Å—å–∫–µ. –ú–æ–Ω–≥–æ–ª—å—Å—å–∫–∞ –Ω–∞–≤–∞–ª–∞",
    "–†—É—Å—å–∫—ñ –∫–Ω—è–∑—ñ–≤—Å—Ç–≤–∞ XIV‚ÄìXVI —Å—Ç. –ö—Ä–∏–º—Å—å–∫–µ —Ö–∞–Ω—Å—Ç–≤–æ",
    "–†—É—Å—å-–£–∫—Ä–∞—ó–Ω–∞: –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –ö–∏—ó–≤—Å—å–∫–æ—ó –¥–µ—Ä–∂–∞–≤–∏",
    "–†—É—Å—å-–£–∫—Ä–∞—ó–Ω–∞: —Ä–æ–∑–∫–≤—ñ—Ç –ö–∏—ó–≤—Å—å–∫–æ—ó –¥–µ—Ä–∂–∞–≤–∏",
    "–†—É—Å—å-–£–∫—Ä–∞—ó–Ω–∞: –∫—É–ª—å—Ç—É—Ä–∞ IX‚ÄìXIV —Å—Ç–æ–ª—ñ—Ç—å",
    "–î—Ä—É–≥–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ XVI ‚Äì –ø–µ—Ä—à–∞ –ø–æ–ª–æ–≤–∏–Ω–∞ XVIII —Å—Ç.",
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∑–µ–º–ª—ñ –≤ –†–µ—á—ñ –ü–æ—Å–ø–æ–ª–∏—Ç—ñ–π (II –ø–æ–ª. XVI —Å—Ç.)",
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∑–µ–º–ª—ñ –≤ –†–µ—á—ñ –ü–æ—Å–ø–æ–ª–∏—Ç—ñ–π (–Ü –ø–æ–ª. XVII —Å—Ç.)",
    "–ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ-–≤–∏–∑–≤–æ–ª—å–Ω–∞ –≤—ñ–π–Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–∏ XVII —Å—Ç.",
    "–ö–æ–∑–∞—Ü—å–∫–∞ –¥–µ—Ä–∂–∞–≤–∞ (50‚Äì80-—Ç—ñ —Ä—Ä. XVII —Å—Ç.)",
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∑–µ–º–ª—ñ –∫. XVII ‚Äì –Ü –ø–æ–ª. XVIII —Å—Ç.",
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –∑–µ–º–ª—ñ –≤ –Ü–Ü –ø–æ–ª. XVIII —Å—Ç.",
    "–ö—ñ–Ω–µ—Ü—å XVIII ‚Äì XIX —Å—Ç.",
    "–£–∫—Ä. –∑–µ–º–ª—ñ –≤ –†–æ—Å. —ñ–º–ø–µ—Ä—ñ—ó (–∫. XVIII ‚Äì –Ü –ø–æ–ª. XIX —Å—Ç.)",
    "–£–∫—Ä. –∑–µ–º–ª—ñ –≤ –ê–≤—Å—Ç—Ä. —ñ–º–ø–µ—Ä—ñ—ó (–∫. XVIII ‚Äì –Ü –ø–æ–ª. XIX —Å—Ç.)",
    "–ö—É–ª—å—Ç—É—Ä–∞ –£–∫—Ä–∞—ó–Ω–∏ (–∫. XVIII ‚Äì –Ü –ø–æ–ª. XIX —Å—Ç.)",
    "–£–∫—Ä. –∑–µ–º–ª—ñ –≤ –†–æ—Å. —ñ–º–ø–µ—Ä—ñ—ó (–Ü–Ü –ø–æ–ª. XIX —Å—Ç.)",
    "–£–∫—Ä. –∑–µ–º–ª—ñ –≤ –ê–≤—Å—Ç—Ä–æ-–£–≥–æ—Ä—â–∏–Ω—ñ (–Ü–Ü –ø–æ–ª. XIX —Å—Ç.)",
    "–ö—É–ª—å—Ç—É—Ä–∞ –£–∫—Ä–∞—ó–Ω–∏ (–Ü–Ü –ø–æ–ª. XIX ‚Äì –ø–æ—á. XX —Å—Ç.)",
    "–£–∫—Ä. –∑–µ–º–ª—ñ –≤ –†–æ—Å. —ñ–º–ø–µ—Ä—ñ—ó (1900‚Äì1914 —Ä—Ä.)",
    "–£–∫—Ä. –∑–µ–º–ª—ñ –≤ –ê–≤—Å—Ç—Ä–æ-–£–≥–æ—Ä—â–∏–Ω—ñ (1900‚Äì1914 —Ä—Ä.)",
    "–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏ –•–• ‚Äì –ø–æ—á–∞—Ç–∫—É –•–•–Ü —Å—Ç.",
    "–£–∫—Ä–∞—ó–Ω–∞ –≤ —Ä–æ–∫–∏ –ü–µ—Ä—à–æ—ó —Å–≤—ñ—Ç–æ–≤–æ—ó –≤—ñ–π–Ω–∏",
    "–ü–æ—á–∞—Ç–æ–∫ –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Ä–µ–≤–æ–ª—é—Ü—ñ—ó",
    "–ì–µ—Ç—å–º–∞–Ω–∞—Ç –ü–∞–≤–ª–∞ –°–∫–æ—Ä–æ–ø–∞–¥—Å—å–∫–æ–≥–æ",
    "–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –£–ù–†",
    "–ö–æ–º—É–Ω—ñ—Å—Ç–∏—á–Ω–∏–π —Ç–æ—Ç–∞–ª—ñ—Ç–∞—Ä–Ω–∏–π —Ä–µ–∂–∏–º –≤ –£–∫—Ä–∞—ó–Ω—ñ",
    "–ë—ñ–ª—å—à–æ–≤–∏—Ü—å–∫–∏–π —Ç–æ—Ç–∞–ª—ñ—Ç–∞—Ä–∏–∑–º –≤ –£–∫—Ä–∞—ó–Ω—ñ",
    "–ó–∞—Ö—ñ–¥–Ω–∞ –£–∫—Ä–∞—ó–Ω–∞ –≤ –º—ñ–∂–≤–æ—î–Ω–Ω–∏–π –ø–µ—Ä—ñ–æ–¥",
    "–ü–æ—á–∞—Ç–æ–∫ –î—Ä—É–≥–æ—ó —Å–≤—ñ—Ç–æ–≤–æ—ó –≤—ñ–π–Ω–∏ (1939‚Äì1941)",
    "–†—É—Ö –û–ø–æ—Ä—É (1941‚Äì1943)",
    "–í–∏–∑–≤–æ–ª–µ–Ω–Ω—è –£–∫—Ä–∞—ó–Ω–∏ (1943‚Äì1945)",
    "–ü–æ–≤–æ—î–Ω–Ω—ñ —Ä–æ–∫–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ",
    "–î–µ—Å—Ç–∞–ª—ñ–Ω—ñ–∑–∞—Ü—ñ—è",
    "–ö—Ä–∏–∑–∞ —Ä–∞–¥—è–Ω—Å—å–∫–æ—ó —Å–∏—Å—Ç–µ–º–∏",
    "–ù–µ–∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –£–∫—Ä–∞—ó–Ω–∏",
    "–°—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–µ—Ä–∂–∞–≤–∏",
    "–ù–æ–≤–∞ –£–∫—Ä–∞—ó–Ω–∞",
]
#-----------------------------------------------------------------------------------------------------------------------
ITEMS_PER_PAGE = 10
EMOJI_START = "üìò "
EMOJI_END = " ‚ú®"

#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –ó–∞–≤–∂–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ callback_query, —â–æ–± –ø—Ä–∏–±—Ä–∞—Ç–∏ "–≥–æ–¥–∏–Ω–Ω–∏–∫" –∑ –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤", callback_data='main_keyboard')],
        [InlineKeyboardButton("üìö –ö–æ—Ä–∏—Å–Ω—ñ —Ñ–∞–π–ª–∏", callback_data='KorFail')],
        [InlineKeyboardButton("üìù –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è", callback_data='PrZavd')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞", callback_data='about_command')],
        [InlineKeyboardButton("üõ†Ô∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help_command')]
    ]

    try:
        await query.edit_message_text(
            text="–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å.
        pass

#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤", callback_data='main_keyboard')],
        [InlineKeyboardButton("üìö –ö–æ—Ä–∏—Å–Ω—ñ —Ñ–∞–π–ª–∏", callback_data='KorFail')],
        [InlineKeyboardButton("üìù –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è", callback_data='PrZavd')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞", callback_data='about_command')],
        [InlineKeyboardButton("üõ†Ô∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data='help_command')]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üëã –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—å –¥–æ –ù–ú–¢. –û–±–∏—Ä–∞–π –ø—Ä–µ–¥–º–µ—Ç, –ø—Ä–æ—Ö–æ–¥—å —Ç–µ—Å—Ç–∏, —Å–ª—ñ–¥–∫—É–π –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å–æ–º ‚Äî —ñ –≤–ø–µ–≤–Ω–µ–Ω–æ –π–¥–∏ –¥–æ 200+ –±–∞–ª—ñ–≤! üöÄüìö‚ú®.\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ "–ü—Ä–æ –±–æ—Ç–∞"
async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    try:
        await query.edit_message_text(
            "–ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ –ù–ú–¢ üìöüöÄ\n\n"
            "–û—Å—å —â–æ —è –≤–º—ñ—é:\n"
            "- –î–æ–ø–æ–º–∞–≥–∞—é –≥–æ—Ç—É–≤–∞—Ç–∏—Å—è –∑ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ (–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞, —ñ—Å—Ç–æ—Ä—ñ—è)\n"
            "- –ù–∞–¥—Å–∏–ª–∞—é –∫–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ PDF\n"
            "- –ü—Ä–æ–≤–æ–¥–∂—É —Ç–µ—Å—Ç–∏ –¥–ª—è –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –∑–Ω–∞–Ω—å\n\n"
            "–Ø–∫—â–æ –º–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó ‚Äî –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞!\n\n"
            "–©–∞—Å–ª–∏–≤–æ—ó –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–∞ –≤–∏—Å–æ–∫–∏—Ö –±–∞–ª—ñ–≤! üéâ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ "–î–æ–ø–æ–º–æ–≥–∞"
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    try:
        await query.edit_message_text(
            "üõ†Ô∏è –î–æ–ø–æ–º–æ–≥–∞\n\n"
            "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –ù–ú–¢. –û—Å—å —è–∫ –Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:\n"
            "- –û–±–∏—Ä–∞–π –ø—Ä–µ–¥–º–µ—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É.\n"
            "- –ü–µ—Ä–µ–≥–ª—è–¥–∞–π —Ç–µ–º–∏ —Ç–∞ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏.\n"
            "- –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è (–ø–ª–∞–Ω—É—î—Ç—å—Å—è).\n"
            "- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏.\n\n"
            "–Ø–∫—â–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ –∞–±–æ —î —ñ–¥–µ—ó, –ø–∏—à–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É.\n\n"
            "–£—Å–ø—ñ—Ö—ñ–≤ —É –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ! üöÄ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
async def DovMat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    file_path = os.path.join("KorysniFaili", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞_–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏.pdf")
    keyboard = [
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    try:
        with open(file_path, "rb") as file:
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª –Ω–æ–≤–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –∑ –∫–Ω–æ–ø–∫–æ—é
            await query.message.reply_document(file, filename="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞_–ú–∞—Ç–µ—Ä—ñ–∞–ª–∏.pdf")
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–∫—Ä–µ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é
            # –Ø–∫—â–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ, —Ç–æ –∫—Ä–∞—â–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –Ω–æ–≤–µ.
            # –Ø–∫—â–æ –∂ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ, —Ü–µ —ñ–Ω—à–∏–π –ø—ñ–¥—Ö—ñ–¥.
            # –ù–∞—Ä–∞–∑—ñ, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é.
            await query.message.reply_text("–§–∞–π–ª –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
    except FileNotFoundError:
        await query.message.reply_text("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–∞–π–ª—É: {e}")
        await query.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É.")
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
async def KorFail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üìö –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", callback_data='DovMat')],
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("‚û°Ô∏è–î–æ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤‚û°Ô∏è", callback_data='main_keyboard')]
    ]
    try:
        await query.edit_message_text(
            "–û—Å—å –≤—Å—ñ –∫–æ—Ä–∏—Å–Ω—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏üöÄ",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω–Ω—å
async def PrZavd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üìê–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", callback_data='PrZavdMathematics')],
        [InlineKeyboardButton("üìñ–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏", callback_data='PrZavdUkrMova')],
        [InlineKeyboardButton("üè∞ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ –Ü—Å—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏", callback_data='PrZavdHistory')],
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    try:
        await query.edit_message_text(
            text="–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω–Ω—å –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
async def PrZavdMathematics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='PrZavd')],
    ]
    try:
        await query.edit_message_text(
            text="–£ —Ä–æ–∑—Ä–æ–±—Ü—ñüõ†Ô∏è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω–Ω—å –∑ –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏
async def PrZavdUkrMova(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='PrZavd')],
    ]
    try:
        await query.edit_message_text(
            text="–£ —Ä–æ–∑—Ä–æ–±—Ü—ñüõ†Ô∏è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∞–∫—Ç–∏—á–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω–Ω—å –∑ –Ü—Å—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏
async def PrZavdHistory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='PrZavd')],
    ]
    try:
        await query.edit_message_text(
            text="–£ —Ä–æ–∑—Ä–æ–±—Ü—ñüõ†Ô∏è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
async def main_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üìê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data='Mathematics')],
        [InlineKeyboardButton("üìñ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞", callback_data='UkrMova')],
        [InlineKeyboardButton("üè∞ –Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏", callback_data='History')],
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')]
    ]
    try:
        await query.edit_message_text(
            text="–û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Ç–µ–º –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏
async def Mathematics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ callback_data
    # –Ø–∫—â–æ callback_data - 'Mathematics', —Ç–æ —Ü–µ –ø–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    if "_" in data and data.split("_")[1].isdigit():
        page = int(data.split("_")[1])
    else:
        page = 1
    total_pages = (len(mathematics_topics) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    if total_pages == 0 and len(mathematics_topics) > 0: # –î–ª—è –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ —Ç–µ–º –º–µ–Ω—à–µ –Ω—ñ–∂ ITEMS_PER_PAGE
        total_pages = 1
    elif len(mathematics_topics) == 0: # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ —Ç–µ–º –ø–æ—Ä–æ–∂–Ω—ñ–π
        total_pages = 0
    # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–∏—Ö –º–µ–∂–∞—Ö
    if page < 1:
        page = 1
    elif page > total_pages and total_pages > 0:
        page = total_pages
    elif total_pages == 0: # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–º, —Ç–æ –Ω–µ–º–∞—î —ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        page = 0
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è–î–æ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤‚¨ÖÔ∏è", callback_data='main_keyboard')],
    ]
    if total_pages > 0: # –õ–∏—à–µ —è–∫—â–æ —î —Ç–µ–º–∏, –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ç–µ–º
        start_index = (page - 1) * ITEMS_PER_PAGE
        end_index = start_index + ITEMS_PER_PAGE
        topics_on_page = mathematics_topics[start_index:end_index]
        for i, topic in enumerate(topics_on_page, start=start_index + 1):
            button_text = f"{EMOJI_START} –¢–µ–º–∞ {i}. {topic} {EMOJI_END}"
            # –£–Ω–∏–∫–∞–π—Ç–µ –∫–æ–ª—ñ–∑—ñ–π callback_data: `mathematics_topic_{i}`
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"mathematics_topic_{i}")])
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"Mathematics_{page - 1}"))

    nav_buttons.append(InlineKeyboardButton("üè† –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))

    if total_pages > 0 and page < total_pages: # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"Mathematics_{page + 1}"))

    if nav_buttons: # –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫, —è–∫—â–æ –≤–æ–Ω–∏ —î
        keyboard.append(nav_buttons)
    text_message = ""
    if total_pages > 0:
        text_message = f"üìö –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –∑ {total_pages}\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:"
    else:
        text_message = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Ç–µ–º –∑ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏."

    try:
        await query.edit_message_text(
            text=text_message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Ç–µ–º –∑ –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏
async def UkrMova(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if "_" in data and data.split("_")[1].isdigit():
        page = int(data.split("_")[1])
    else:
        page = 1
    total_pages = (len(ukrainian_topics) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    if total_pages == 0 and len(ukrainian_topics) > 0:
        total_pages = 1
    elif len(ukrainian_topics) == 0:
        total_pages = 0
    if page < 1:
        page = 1
    elif page > total_pages and total_pages > 0:
        page = total_pages
    elif total_pages == 0:
        page = 0
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è–î–æ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤‚¨ÖÔ∏è", callback_data='main_keyboard')],
    ]
    if total_pages > 0:
        start_index = (page - 1) * ITEMS_PER_PAGE
        end_index = start_index + ITEMS_PER_PAGE
        topics_on_page = ukrainian_topics[start_index:end_index]

        for i, topic in enumerate(topics_on_page, start=start_index + 1):
            button_text = f"{EMOJI_START} –¢–µ–º–∞ {i}. {topic} {EMOJI_END}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"ukrainian_topic_{i}")])
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"UkrMova_{page - 1}"))
    nav_buttons.append(InlineKeyboardButton("üè† –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))
    if total_pages > 0 and page < total_pages:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"UkrMova_{page + 1}"))

    if nav_buttons:
        keyboard.append(nav_buttons)
    text_message = ""
    if total_pages > 0:
        text_message = f"üìö –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –∑ {total_pages}\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:"
    else:
        text_message = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Ç–µ–º –∑ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏."
    try:
        await query.edit_message_text(
            text=text_message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–¥—ñ–ª—É "–Ü—Å—Ç–æ—Ä—ñ—è –£–∫—Ä–∞—ó–Ω–∏"
async def History(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        # –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ "–°–ø–∏—Å–æ–∫ —Ç–µ–º" –∑–∞–≤–∂–¥–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –ø–µ—Ä—à—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        [InlineKeyboardButton("üìö –°–ø–∏—Å–æ–∫ —Ç–µ–º", callback_data='show_history_topics_1')],
        [InlineKeyboardButton("üßë‚Äçüè´ –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ—ó", callback_data='history_personalities')], # –¶—ñ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∏ –Ω–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è
        [InlineKeyboardButton("üèõÔ∏è –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞", callback_data='history_architecture')], # –¶—ñ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∏ –Ω–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è
        [InlineKeyboardButton("üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ", callback_data='history_art')], # –¶—ñ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∏ –Ω–µ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("‚¨ÖÔ∏è–î–æ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤‚¨ÖÔ∏è", callback_data='main_keyboard')]
    ]
    try:
        await query.edit_message_text(
            text="–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è "–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ—ó —ñ—Å—Ç–æ—Ä—ñ—è"
async def history_personalities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='History')],
    ]
    try:
        await query.edit_message_text(
            text="–£ —Ä–æ–∑—Ä–æ–±—Ü—ñüõ†Ô∏è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è "–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ —ñ—Å—Ç–æ—Ä—ñ—è"
async def history_architecture(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='History')],
    ]
    try:
        await query.edit_message_text(
            text="–£ —Ä–æ–∑—Ä–æ–±—Ü—ñüõ†Ô∏è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è "–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ —ñ—Å—Ç–æ—Ä—ñ—è"
async def history_art(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üè† –£ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='main_menu')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='History')],
    ]
    try:
        await query.edit_message_text(
            text="–£ —Ä–æ–∑—Ä–æ–±—Ü—ñüõ†Ô∏è",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass
#-----------------------------------------------------------------------------------------------------------------------
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Ç–µ–º –∑ —ñ—Å—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏
async def show_history_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    # –û—á—ñ–∫—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç 'show_history_topics_X', –¥–µ X - –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    if "_" in data and data.split("_")[-1].isdigit(): # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ split("_")[-1] –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
        page = int(data.split("_")[-1])
    else:
        page = 1 # –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∏–π –≤–∏–∫–ª–∏–∫ –∞–±–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ 1 —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    total_pages = (len(history_topics) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    if total_pages == 0 and len(history_topics) > 0: # –î–ª—è –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ —Ç–µ–º –º–µ–Ω—à–µ –Ω—ñ–∂ ITEMS_PER_PAGE
        total_pages = 1
    elif len(history_topics) == 0: # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ —Ç–µ–º –ø–æ—Ä–æ–∂–Ω—ñ–π
        total_pages = 0
    # –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ, —â–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–∏—Ö –º–µ–∂–∞—Ö
    if page < 1:
        page = 1
    elif page > total_pages and total_pages > 0:
        page = total_pages
    elif total_pages == 0: # –Ø–∫—â–æ –Ω–µ–º–∞—î —Ç–µ–º, —Ç–æ –Ω–µ–º–∞—î —ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫
        page = 0
    keyboard = []
    if total_pages > 0: # –õ–∏—à–µ —è–∫—â–æ —î —Ç–µ–º–∏, –¥–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ç–µ–º
        start_index = (page - 1) * ITEMS_PER_PAGE
        end_index = start_index + ITEMS_PER_PAGE
        topics_on_page = history_topics[start_index:end_index]
        for i, topic in enumerate(topics_on_page, start=start_index + 1):
            button_text = f"{EMOJI_START} –¢–µ–º–∞ {i}. {topic} {EMOJI_END}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"history_topic_{i}")])
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"show_history_topics_{page - 1}"))
    nav_buttons.append(InlineKeyboardButton("üè† –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu"))
    if total_pages > 0 and page < total_pages: # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"show_history_topics_{page + 1}"))
    if nav_buttons: # –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫, —è–∫—â–æ –≤–æ–Ω–∏ —î
        keyboard.append(nav_buttons)
    text_message = ""
    if total_pages > 0:
        text_message = f"üìö –°—Ç–æ—Ä—ñ–Ω–∫–∞ {page} –∑ {total_pages}\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:"
    else:
        text_message = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î —Ç–µ–º –∑ —ñ—Å—Ç–æ—Ä—ñ—ó –£–∫—Ä–∞—ó–Ω–∏."
    try:
        await query.edit_message_text(
            text=text_message,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        pass # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—å
#-----------------------------------------------------------------------------------------------------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –≤ –ø—Ä–æ–≥—Ä–∞–º—É
if __name__ == '__main__':
    app = Application.builder().token(TOKEN).build()
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ callback-–∑–∞–ø–∏—Ç—ñ–≤
    app.add_handler(CallbackQueryHandler(main_menu, pattern='^main_menu$'))
    app.add_handler(CallbackQueryHandler(main_keyboard, pattern='^main_keyboard$'))
    app.add_handler(CallbackQueryHandler(PrZavd, pattern='^PrZavd$'))
    app.add_handler(CallbackQueryHandler(KorFail, pattern='^KorFail$'))
    app.add_handler(CallbackQueryHandler(DovMat, pattern='^DovMat$'))
    app.add_handler(CallbackQueryHandler(about_command, pattern='^about_command$'))
    app.add_handler(CallbackQueryHandler(help_command, pattern='^help_command$'))
    app.add_handler(CallbackQueryHandler(history_architecture, pattern='^history_architecture$'))
    app.add_handler(CallbackQueryHandler(history_art, pattern='^history_art$'))
    app.add_handler(CallbackQueryHandler(history_personalities, pattern='^history_personalities$'))
    app.add_handler(CallbackQueryHandler(PrZavdMathematics, pattern='^PrZavdMathematics$'))
    app.add_handler(CallbackQueryHandler(PrZavdUkrMova, pattern='^PrZavdUkrMova$'))
    app.add_handler(CallbackQueryHandler(PrZavdHistory, pattern='^PrZavdHistory$'))
    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ r'^SubjectName(_\d+)?$' –¥–ª—è –æ–±—Ä–æ–±–∫–∏ 'SubjectName' (1 —Å—Ç–æ—Ä—ñ–Ω–∫–∞) —ñ 'SubjectName_X' (X —Å—Ç–æ—Ä—ñ–Ω–∫–∞)
    app.add_handler(CallbackQueryHandler(Mathematics, pattern=r'^Mathematics(_\d+)?$'))
    app.add_handler(CallbackQueryHandler(UkrMova, pattern=r'^UkrMova(_\d+)?$')) # –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –£–∫—Ä–ú–æ–≤–∏
    app.add_handler(CallbackQueryHandler(History, pattern=r'^History$')) # –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤–µ–¥–µ –≤ –º–µ–Ω—é —ñ—Å—Ç–æ—Ä—ñ—ó
    app.add_handler(CallbackQueryHandler(show_history_topics, pattern=r'^show_history_topics(_\d+)?$')) # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Ç–µ–º —ñ—Å—Ç–æ—Ä—ñ—ó
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()
#-----------------------------------------------------------------------------------------------------------------------